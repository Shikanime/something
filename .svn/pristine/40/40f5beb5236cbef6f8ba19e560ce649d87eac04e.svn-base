#include <assert.h>
#include <stdio.h>
#include "./character_movement.h"
#include "./character.h"

void character_should(void (*test)(character_t *c));
void create(character_t	*c);
void move_backward();
void move_forward();
void move_right();
void move_left();
void move(character_t	*c);

void describe_movement()
{
	character_should(create);
	character_should(move_backward);
	character_should(move_forward);
	character_should(move_left);
	character_should(move_right);
	character_should(move);
}

inline void move(character_t	*c) {
	character_move(c, E_FORWARD);
	assert(c->coord[E_X] == 1 && c->coord[E_Y] == 0);
	character_move(c, E_LEFT);
	assert(c->coord[E_X] == 1 && c->coord[E_Y] == -1);
	character_move(c, E_BACKWARD);
	assert(c->coord[E_X] == 0 && c->coord[E_Y] == -1);
	character_move(c, E_RIGHT);
	assert(c->coord[E_X] == 0 && c->coord[E_Y] == 0);
}

inline void					character_should(void (*test)(character_t *c)) {
	character_t	*c = NULL;

	c = make_character(453, 0, 0, E_PLAYER);
	test(c);
	free_character(c);
}

inline void create(character_t	*c) {
	assert(c->id == 453);
	assert(c->coord[E_X] == 0 && c->coord[E_Y] == 0);
	assert(c->type == E_PLAYER);
}

inline void move_backward(character_t	*c) {
	character_move(c, E_BACKWARD);
	assert(c->coord[E_X] == -1 && c->coord[E_Y] == 0);
}

inline void move_forward(character_t	*c) {
	character_move(c, E_FORWARD);
	assert(c->coord[E_X] == 1 && c->coord[E_Y] == 0);
}

inline void move_right(character_t	*c) {
	character_move(c, E_RIGHT);
	assert(c->coord[E_X] == 0 && c->coord[E_Y] == 1);
}

inline void move_left(character_t	*c) {
	character_move(c, E_LEFT);
	assert(c->coord[E_X] == 0 && c->coord[E_Y] == -1);
}
